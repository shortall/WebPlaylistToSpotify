name: Version and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    outputs:
      versionize_outcome: ${{ steps.versionize.outcome }}
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.REPO_READER_BOT }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Format code
      run: dotnet tool install -g dotnet-format && dotnet-format --check

    - name: Build
      run: dotnet build --no-restore

    - name: Install Versionize
      run: dotnet tool install --global Versionize

    - name: Setup git
      run: |
        git config --local user.email "${{ secrets.GIT_EMAIL }}"
        git config --local user.name "Stephen Shortall"

    - name: Versionize Release
      id: versionize
      run: versionize --changelog-all --exit-insignificant-commits
      continue-on-error: true

    - name: No release required
      if: steps.versionize.outcome != 'success'
      run: echo "Skipping Release. No release required."

    - name: Push changes to GitHub
      if: steps.versionize.outcome == 'success'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        tags: true

  publish:
    needs: build
    if: needs.build.outputs.versionize_outcome == 'success'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.REPO_READER_BOT }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Build
      shell: bash
      run: |
        # Define some variables for things we need
        tag=$(git describe --tags --abbrev=0)
        release_name="App-$tag-${{ matrix.target }}"

        # Build everything
        dotnet publish ./WebPlaylistToSpotify/WebPlaylistToSpotify.csproj --runtime "${{ matrix.target }}" -c Release -o "$release_name"

        # Pack files
        if [ "${{ matrix.target }}" == "win-x64" ]; then
          7z a -tzip "${release_name}.zip" "${release_name}/*"
          echo "RELEASE_ARCHIVE=${release_name}.zip" >> $GITHUB_ENV
        else
          tar czvf "${release_name}.tar.gz" "$release_name"
          echo "RELEASE_ARCHIVE=${release_name}.tar.gz" >> $GITHUB_ENV
        fi

        # Delete output directory
        rm -r "$release_name"

    - name: "Create release"
      uses: "actions/github-script@v6"
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
        script: |
          try {
            const tags_url = context.payload.repository.tags_url + "?per_page=1"
            const result = await github.request(tags_url)
            const current_tag = result.data[0].name
            await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: current_tag,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: current_tag,
            });

          #  const release = await github.repos.getReleaseByTag({
          #    owner: context.repo.owner,
          #    repo: context.repo.repo,
          #    current_tag
          #  });
            
          #  tag=$(git describe --tags --abbrev=0)
          #  release_name="App-$tag-${{ matrix.target }}"

          #  await github.repos.uploadReleaseAsset({
          #    owner: context.repo.owner,
          #    repo: context.repo.repo,
          #    release_id: release.data.id,
          #    name: ${{ steps.Build.outputs.RELEASE_NAME }},
          #    data: await fs.readFileSync(${{ steps.Build.outputs.RELEASE_ARCHIVE }})
          #  });

          #} catch (error) {
          #  core.setFailed(error.message);
          #}